I'm using April this year. The library is in Guix and more current than the
Quicklisp version, but the latter seems functionally equivalent. (I did want to
use ~april-ref~, but even on the latest April that has to be called with double
colon; Macros are fine for now.)

I use SBCL but played with some other implementations during the packaging
process. In ABCL, loading Guix libraries can be tricky. I found out that one
cannot override the packaged version of ASDF, and Guix does not patch it like
it does for other CL implementations. I also had to learn the new ASDF
configuration format (well, I didn't have to as the global registry still
works, but I did anyway). Pushing =$GUIX_ENVIRONMENT/share/common-lisp/systems=
into ASDF manually seems to do the trick.

Since it's at the top of my mind, I may as well note that it might be worth it
to make a Guix patch which includes the Guix-patched version of ASDF with ABCL.

Most "work" so far has been REPL fiddling, but I have the very beginnings of a
file-loading solution, which I'll tangle here.
* Input processing.
April has trouble with newlines in certain positions, so we need a constant to
be able to write short string-processing code.

#+name: nl
#+begin_src gnu-apl
  nl←'
  '
#+end_src

In some cases, the input is a simple list of numbers, one per line.

#+name: nums
#+begin_src gnu-apl
  nums←{⍎¨(nl∘≠⊆⊢)⍵}
#+end_src
* Day 1: Sonar Sweep.
I earned the first two stars with the straightforward:

#+begin_src gnu-apl
  (+/2</⊢)
#+end_src

and

#+begin_src gnu-apl
  (+/2</3+/⊢)
#+end_src

Then I read that summing the windows is superfluous, and came up with:

#+begin_src gnu-apl
  +/((⊃<⊃∘⌽)¨4,/⊢)
#+end_src

which I found incredibly unsatisfying.

After some reverse code golf, I wrote a nasty solution which is at least
general enough for both days. The Each felt unnecessary, but I couldn't factor
it out at first.

#+begin_src gnu-apl
  +/((>/2↑¯1∘⌽)¨(⊣,/⊢))
#+end_src

Next, I came up with a dfn solution using stencil.

#+begin_src gnu-apl
  {
      d←⌊(⍺-1)÷2                  ⍝ amount of stencil overlap to drop
      (+/d↓(-d)↓(>/2↑¯1⌽⊢)⌺⍺)⍵
  }
#+end_src

After reading about Mix and some of APL's parsing rules, I figured that using
Mix and then working on a two-dimensional array might be better than using
Each. I'm not happy with the number of parentheses in such a tacit solution,
but I did get it to work. It even takes the size of window to compare on the
left instead of relying on magic numbers passed.

#+begin_src gnu-apl
  +/((⊣/<⊢/)(↑((1+⊣),/⊢)))
#+end_src

By the time I started to tangle code, I decided I would use the first
general-feeling version. After a night of sleep and a day, the tacks were easy
enough to remove. I was at a loss with regard to naming, so a bad one stuck.

#+begin_src gnu-apl
  primitive1←(+/((>/2↑¯1∘⌽)¨,/))
#+end_src

That solution was rather short and general enough, but the way it took the
magic window size instead of the interval-to-compare as given in the problem
bothered me. It took me long enough, but I studied my trains more, cheated to
figure out that an Inner Product was effective, and came up with a new
primitive.

#+name: base1
#+begin_src gnu-apl
  base1←(↓+.>⊢↓⍨-⍤⊣)
#+end_src

It can be lengthened with another Commute to preserve the Less Than. But in
either case, this version takes the window size from the Advent site instead of
requiring the proper left argument for Windowed Reduce.

The first star requires the comparison of pairs.

#+name: s1a
#+begin_src gnu-apl
  s1a←1∘base1∘nums
#+end_src

The second requires the comparison of windows of three.

#+name: s1b
#+begin_src gnu-apl
  s1b←3∘base1∘nums
#+end_src

I also created a more sensical version of the Mix-using solution. It may be
possible to simplify this more; My skills are insufficient. It was fun but it
seems less elegant, in the end, than the inner product.

#+begin_src gnu-apl
  (+/∘(⊣/<⊢/)∘↑(⊢,/⍨1+⊣))
#+end_src
* Day 2: Dive!
* Tangled source.
** =advent-of-april.apl=
#+begin_src gnu-apl :noweb yes :tangle advent-of-april.apl
  <<nl>>
  <<nums>>

  <<base1>>
  <<s1a>>
  <<s1b>>
#+end_src
** =manifest.scm=
#+begin_src scheme :tangle manifest.scm
  (specifications->manifest
   '("sbcl" "sbcl-april"))
#+end_src
** =run-day.lisp=
#+begin_src lisp :tangle run-day.lisp
  (require 'asdf)
  (require 'april)

  (april:april-load (pathname "advent-of-april.apl"))

  (defun print-solutions (day)
    (with-open-file (input (format nil "data/~a" day))
      (let ((puzzle (make-string (file-length input))))
        (read-sequence puzzle input)
        (april:april (with (:store-val (p puzzle) (d day)))
                     "⍎'⎕←s',(⍕d),'a p◊⎕←s',(⍕d),'b p'"))))
#+end_src
** =run-day.sh=
#+begin_src sh :tangle run-day.sh :tangle-mode (identity #o755)
  DAY=$1

  sbcl --noinform --noprint --disable-debugger \
       --load run-day.lisp \
       --eval "(print-solutions $DAY)" \
       --quit
#+end_src
