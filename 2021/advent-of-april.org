I'm using April this year. The library is in Guix and more current than the
Quicklisp version, but the latter seems functionally equivalent. (I did want to
use ~april-ref~, but even on the latest April that has to be called with double
colon; Macros are fine for now.)

I use SBCL but played with some other implementations during the packaging
process. In ABCL, loading Guix libraries can be tricky. I found out that one
cannot override the packaged version of ASDF, and Guix does not patch it like
it does for other CL implementations. I also had to learn the new ASDF
configuration format (well, I didn't have to as the global registry still
works, but I did anyway). Pushing =$GUIX_ENVIRONMENT/share/common-lisp/systems=
into ASDF manually seems to do the trick.

Since it's at the top of my mind, I may as well note that it might be worth it
to make a Guix patch which includes the Guix-patched version of ASDF with ABCL.

Most "work" so far has been REPL fiddling, but I have the very beginnings of a
file-loading solution, which I'll tangle here.
* Input processing.
April has trouble with newlines in certain positions, so we need a constant to
be able to write short string-processing code.

#+name: nl
#+begin_src gnu-apl
  nl←'
  '
#+end_src

Breaking input into lines has an obvious tacit solution.

#+name: lines
#+begin_src gnu-apl
  lines←(nl∘≠⊆⊢)
#+end_src

In some cases, the input is a simple list of numbers, one per line.

#+name: nums
#+begin_src gnu-apl
  nums←⍎¨⍤lines
#+end_src

In other cases, we want space-separated words.

#+name: words
#+begin_src gnu-apl
  words←(' '∘≠⊆⊢)¨⍤lines
#+end_src
* Day 1: Sonar Sweep
I earned the first two stars with the straightforward:

#+begin_src gnu-apl
  (+/2</⊢)
#+end_src

and

#+begin_src gnu-apl
  (+/2</3+/⊢)
#+end_src

Then I read that summing the windows is superfluous, and came up with:

#+begin_src gnu-apl
  +/((⊃<⊃∘⌽)¨4,/⊢)
#+end_src

which I found incredibly unsatisfying.

After some reverse code golf, I wrote a nasty solution which is at least
general enough for both days. The Each felt unnecessary, but I couldn't factor
it out at first.

#+begin_src gnu-apl
  +/((>/2↑¯1∘⌽)¨(⊣,/⊢))
#+end_src

Next, I came up with a dfn solution using stencil.

#+begin_src gnu-apl
  {
      d←⌊(⍺-1)÷2                  ⍝ amount of stencil overlap to drop
      (+/d↓(-d)↓(>/2↑¯1⌽⊢)⌺⍺)⍵
  }
#+end_src

After reading about Mix and some of APL's parsing rules, I figured that using
Mix and then working on a two-dimensional array might be better than using
Each. I'm not happy with the number of parentheses in such a tacit solution,
but I did get it to work. It even takes the size of window to compare on the
left instead of relying on magic numbers passed.

#+begin_src gnu-apl
  +/((⊣/<⊢/)(↑((1+⊣),/⊢)))
#+end_src

By the time I started to tangle code, I decided I would use the first
general-feeling version. After a night of sleep and a day, the tacks were easy
enough to remove. I was at a loss with regard to naming, so a bad one stuck.

#+begin_src gnu-apl
  primitive1←(+/((>/2↑¯1∘⌽)¨,/))
#+end_src

That solution was rather short and general enough, but the way it took the
magic window size instead of the interval-to-compare as given in the problem
bothered me. It took me long enough, but I studied my trains more, cheated to
figure out that an Inner Product was effective, and came up with a new
primitive.

#+name: base1
#+begin_src gnu-apl
  base1←(↓+.>⊢↓⍨-⍤⊣)
#+end_src

It can be lengthened with another Commute to preserve the Less Than. But in
either case, this version takes the window size from the Advent site instead of
requiring the proper left argument for Windowed Reduce.

The first star requires the comparison of pairs.

#+name: s1a
#+begin_src gnu-apl
  s1a←1∘base1⍤nums
#+end_src

The second requires the comparison of windows of three.

#+name: s1b
#+begin_src gnu-apl
  s1b←3∘base1⍤nums
#+end_src

I also created a more sensical version of the Mix-using solution. It may be
possible to simplify this more; My skills are insufficient. It was fun but it
seems less elegant, in the end, than the inner product.

#+begin_src gnu-apl
  (+/∘(⊣/<⊢/)∘↑(⊢,/⍨1+⊣))
#+end_src
* Day 2: Dive!
The input here contains more than numbers, so we can't use ~nums~
straightaway. ~words~ will give us something like tokens.

The idea (one that I failed to come up with on my own) is to apply a mask to
the numbers. Those can be pulled out thus, but we can also do that inside the
eventual Outer Product:

#+begin_src gnu-apl
  ⍎¨⊢/↑
#+end_src

The given directions can be compared to the available options based on pulling
out the first letter in an outer product.

#+begin_src gnu-apl
  'f' 'd' 'u'∘.{⍺=⊃⊃⍵}
#+end_src

If we use Split on that, we can pull out each direction as a mask, and multiply
by the numbers to get a list of instructions. Then the calculation for the
first star is straightforward. The horizontal distance is the sum of all
forward movements, and the depth is the sum of downs minus the sum of ups
(simplified as the sum of ups and negative downs in a single vector). That was
the initial solution, and looked something like this.

#+begin_src gnu-apl
  {
    t←(' '∘≠⊆⊢)¨(nl∘≠⊆⊢)⍵
    n←⍎¨⊢/↑t
    f d u←↓'f' 'd' 'u'∘.{⍺=⊃⊃⍵}t
    +/f×n×+/(d×n)-u×n
  }
#+end_src

After consideration of that code and the second star requirements, I made a few
refactors. The strand of letters can become a string, since we are comparing
characters. The multiplication can occur inside the Outer Product function by
Evaluating the single string in question. The whole thing can be made tacit by
Commuting the derived function and Binding ~'fdu'~ to it. ~base2~ thus provides
the Splittable result, and is the shared foundation of both solutions.

#+name: base2
#+begin_src gnu-apl
  base2←∘.{(⍎⊃⌽⍵)×⍺=⊃⊃⍵}⍨∘'fdu'
#+end_src

The A solution preprocesses the input with ~words~, Splits the base result into
components, and does the calculation from above with the multiplication against
the number column already done in ~base2~.

#+name: s2a
#+begin_src gnu-apl
  s2a←{f d u←↓base2⍤words⍵ ◊ +/f×+/d-u}
#+end_src

Aim is integrated into the solution by Scanning ~d-u~. That results in a vector
of the sub's aim at each step. From there, it seems that the ~+/f×~ might be
factorable, but the solution is reasonably readable without that change.

#+name: s2b
#+begin_src gnu-apl
  s2b←{f d u←↓base2⍤words⍵ ◊ +/f×+/f×+\d-u}
#+end_src

Those solutions seem clear, and turning things tacit didn't even reduce my
character count. However, I wanted to record my efforts here anyway. I learned
about the Over operator and wanted to see if it made the solution clearer. It
was also an opportunity to experiment with rotating the matrix from ~base2~
instead of decomposing it into vectors. I reached my limit when it comes to
emulating math expressions with variables in tacit form. The braces around the
Reduction are because April's parsing chokes on it. I'm not sure how to
disambiguate beyond using dfns.

#+begin_src gnu-apl
  s2a←(⊢×⍥{+/1↑⍵}1∘⊖-2∘⊖)⍤base2⍤words
#+end_src

The subtraction of the entire down and up matrices seemed like a waste, so I
tried adding another Over to pull out the first row at that point. That wastes
characters by requiring the same operation on the forward matrix, and requires
more brackets because, again, I don't get April's parsing rules. Turning those
dfns into parenthesized expressions which the TryAPL parser can handle gives me
errors, but no precise locations.

April seems not to provide the same level of parsing clarity of TryAPL, but
with the combination of ~(with (:print-tokens))~ and the knowledge of APL's
operator/function association rules, I should be able to figure out where the
parsing is going wrong. ~(with (:compile-only))~ is a longer shot as it
generates quite a bit of code for this length of expression, but still
interesting. After all, I should still go through the ~(demo)~ output.

#+begin_src gnu-apl
  s2a←({1↑⍵}×⍥{+/⍵}1∘⊖-⍥{1↑⍵}2∘⊖)⍤base2⍤words
#+end_src
* TODO [[https://www.reddit.com/r/adventofcode/comments/ru8bhl/2021_all_daysawk_postscript_aoc_in_100_lines_of/][Awk seems kinda close]].
* TODO [[https://cuddly-octo-palm-tree.com/posts/2022-01-02-aoc-24/][Reading on a solution to the dreaded day 24]].
* Tangled source.
** =advent-of-april.apl=
#+begin_src gnu-apl :noweb yes :tangle advent-of-april.apl
  <<nl>>
  <<lines>>
  <<nums>>
  <<words>>

  <<base1>>
  <<s1a>>
  <<s1b>>

  <<base2>>
  <<s2a>>
  <<s2b>>
#+end_src
** =manifest.scm=
#+begin_src scheme :tangle manifest.scm
  (use-modules (guix packages)
               (guix git-download)
               (gnu packages lisp-xyz))

  (define sbcl-april-master
    (let ((commit "75d78ff308c626710fac1633646d1d69a7c3014a")
          (revision "1"))
      (package
        (inherit sbcl-april)
        (version (git-version "1.0" revision commit))
        (source
         (origin
           (method git-fetch)
           (uri (git-reference
                 (url "https://github.com/phantomics/april")
                 (commit commit)))
           (file-name (git-file-name "cl-april" version))
           (sha256
            (base32 "0iqkz4gqvyajzdfvanrvcvazgbnnw50adafgn58bp1128ahyl5jk"))
           (modules '((guix build utils)))
           (snippet '(begin
                       ;; Remove bundled Apache-relicensed MaxPC.
                       (delete-file-recursively "maxpc-apache")
                       ;; Ensure references are to upstream MaxPC.
                       (substitute* "vex/vex.asd"
                         (("maxpc-apache") "maxpc"))))))
        (inputs(cons (list "sbcl-cl-unicode" sbcl-cl-unicode)
                     (package-inputs sbcl-april))))))

  (concatenate-manifests
   (list
    (specifications->manifest '("sbcl"))
    (packages->manifest (list sbcl-april-master))))
#+end_src
** =run-day.lisp=
#+begin_src lisp :tangle run-day.lisp
  (require 'asdf)
  (require 'april)

  (april:april-load (pathname "advent-of-april.apl"))

  (defun print-solutions (day data)
    (with-open-file (input (format nil "data/~a" data))
      (let ((puzzle (make-string (file-length input))))
        (read-sequence puzzle input)
        (april:april (with (:store-val (p puzzle) (d day)))
                     "⍎'⎕←s',(⍕d),'a p◊⎕←s',(⍕d),'b p'"))))
#+end_src
** =run-day.sh=
#+begin_src sh :tangle run-day.sh :tangle-mode (identity #o755)
  DAY=$1
  DATA=$2

  sbcl --noinform --noprint --disable-debugger \
       --load run-day.lisp \
       --eval "(print-solutions $DAY \"$DATA\")" \
       --quit
#+end_src
